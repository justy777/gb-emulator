use crate::cpu::{Addr, Cpu, HighAddr, JumpCondition, N16, N8, R16, R8};

impl Cpu {
    pub(crate) fn execute(&mut self, byte: u8) {
        match byte {
            // ---- 8-bit Arithmetic
            // ADD
            0x87 => self.add(R8::A),
            0x80 => self.add(R8::B),
            0x81 => self.add(R8::C),
            0x82 => self.add(R8::D),
            0x83 => self.add(R8::E),
            0x84 => self.add(R8::H),
            0x85 => self.add(R8::L),
            0x86 => self.add(Addr::HL),
            0xC6 => self.add(N8),
            // ADC
            0x8F => self.add_with_carry(R8::A),
            0x88 => self.add_with_carry(R8::B),
            0x89 => self.add_with_carry(R8::C),
            0x8A => self.add_with_carry(R8::D),
            0x8B => self.add_with_carry(R8::E),
            0x8C => self.add_with_carry(R8::H),
            0x8D => self.add_with_carry(R8::L),
            0x8E => self.add_with_carry(Addr::HL),
            0xCE => self.add_with_carry(N8),
            // SUB
            0x97 => self.subtract(R8::A),
            0x90 => self.subtract(R8::B),
            0x91 => self.subtract(R8::C),
            0x92 => self.subtract(R8::D),
            0x93 => self.subtract(R8::E),
            0x94 => self.subtract(R8::H),
            0x95 => self.subtract(R8::L),
            0x96 => self.subtract(Addr::HL),
            0xD6 => self.subtract(N8),
            // SBC
            0x9F => self.subtract_with_carry(R8::A),
            0x98 => self.subtract_with_carry(R8::B),
            0x99 => self.subtract_with_carry(R8::C),
            0x9A => self.subtract_with_carry(R8::D),
            0x9B => self.subtract_with_carry(R8::E),
            0x9C => self.subtract_with_carry(R8::H),
            0x9D => self.subtract_with_carry(R8::L),
            0x9E => self.subtract_with_carry(Addr::HL),
            0xDE => self.subtract_with_carry(N8),
            // AND
            0xA7 => self.and(R8::A),
            0xA0 => self.and(R8::B),
            0xA1 => self.and(R8::C),
            0xA2 => self.and(R8::D),
            0xA3 => self.and(R8::E),
            0xA4 => self.and(R8::H),
            0xA5 => self.and(R8::L),
            0xA6 => self.and(Addr::HL),
            0xE6 => self.and(N8),
            // XOR
            0xAF => self.xor(R8::A),
            0xA8 => self.xor(R8::B),
            0xA9 => self.xor(R8::C),
            0xAA => self.xor(R8::D),
            0xAB => self.xor(R8::E),
            0xAC => self.xor(R8::H),
            0xAD => self.xor(R8::L),
            0xAE => self.xor(Addr::HL),
            0xEE => self.xor(N8),
            // OR
            0xB7 => self.or(R8::A),
            0xB0 => self.or(R8::B),
            0xB1 => self.or(R8::C),
            0xB2 => self.or(R8::D),
            0xB3 => self.or(R8::E),
            0xB4 => self.or(R8::H),
            0xB5 => self.or(R8::L),
            0xB6 => self.or(Addr::HL),
            0xF6 => self.or(N8),
            // CP
            0xBF => self.compare(R8::A),
            0xB8 => self.compare(R8::B),
            0xB9 => self.compare(R8::C),
            0xBA => self.compare(R8::D),
            0xBB => self.compare(R8::E),
            0xBC => self.compare(R8::H),
            0xBD => self.compare(R8::L),
            0xBE => self.compare(Addr::HL),
            0xFE => self.compare(N8),
            // INC
            0x3C => self.increment(R8::A),
            0x04 => self.increment(R8::B),
            0x0C => self.increment(R8::C),
            0x14 => self.increment(R8::D),
            0x1C => self.increment(R8::E),
            0x24 => self.increment(R8::H),
            0x2C => self.increment(R8::L),
            0x34 => self.increment(Addr::HL),
            // DEC
            0x3D => self.decrement(R8::A),
            0x05 => self.decrement(R8::B),
            0x0D => self.decrement(R8::C),
            0x15 => self.decrement(R8::D),
            0x1D => self.decrement(R8::E),
            0x25 => self.decrement(R8::H),
            0x2D => self.decrement(R8::L),
            0x35 => self.decrement(Addr::HL),
            // DAA
            0x27 => self.decimal_adjust_accumulator(),
            // SCF
            0x37 => self.set_carry_flag(),
            // CPL
            0x2F => self.complement_accumulator(),
            // CCF
            0x3F => self.complement_carry_flag(),
            // ---- 16-bit Arithmetic
            // ADD
            0x09 => self.add16_hl(R16::BC),
            0x19 => self.add16_hl(R16::DE),
            0x29 => self.add16_hl(R16::HL),
            0x39 => self.add16_hl(R16::SP),
            0xE8 => self.add16_sp(),
            // INC
            0x03 => self.increment16(R16::BC),
            0x13 => self.increment16(R16::DE),
            0x23 => self.increment16(R16::HL),
            0x33 => self.increment16(R16::SP),
            // DEC
            0x0B => self.decrement16(R16::BC),
            0x1B => self.decrement16(R16::DE),
            0x2B => self.decrement16(R16::HL),
            0x3B => self.decrement16(R16::SP),
            // ---- Bit Shift
            // RLCA
            0x07 => self.rotate_left_circular_accumulator(),
            // RRCA
            0x0F => self.rotate_right_circular_accumulator(),
            // RLA
            0x17 => self.rotate_left_accumulator(),
            // RRA
            0x1F => self.rotate_right_accumulator(),
            // ---- 8-bit Load
            // LD
            0x47 => self.load(R8::B, R8::A),
            0x40 => self.load(R8::B, R8::B),
            0x41 => self.load(R8::B, R8::C),
            0x42 => self.load(R8::B, R8::D),
            0x43 => self.load(R8::B, R8::E),
            0x44 => self.load(R8::B, R8::H),
            0x45 => self.load(R8::B, R8::L),
            0x46 => self.load(R8::B, Addr::HL),
            0x06 => self.load(R8::B, N8),
            0x4F => self.load(R8::C, R8::A),
            0x48 => self.load(R8::C, R8::B),
            0x49 => self.load(R8::C, R8::C),
            0x4A => self.load(R8::C, R8::D),
            0x4B => self.load(R8::C, R8::E),
            0x4C => self.load(R8::C, R8::H),
            0x4D => self.load(R8::C, R8::L),
            0x4E => self.load(R8::C, Addr::HL),
            0x0E => self.load(R8::C, N8),
            0x57 => self.load(R8::D, R8::A),
            0x50 => self.load(R8::D, R8::B),
            0x51 => self.load(R8::D, R8::C),
            0x52 => self.load(R8::D, R8::D),
            0x53 => self.load(R8::D, R8::E),
            0x54 => self.load(R8::D, R8::H),
            0x55 => self.load(R8::D, R8::L),
            0x56 => self.load(R8::D, Addr::HL),
            0x16 => self.load(R8::D, N8),
            0x5F => self.load(R8::E, R8::A),
            0x58 => self.load(R8::E, R8::B),
            0x59 => self.load(R8::E, R8::C),
            0x5A => self.load(R8::E, R8::D),
            0x5B => self.load(R8::E, R8::E),
            0x5C => self.load(R8::E, R8::H),
            0x5D => self.load(R8::E, R8::L),
            0x5E => self.load(R8::E, Addr::HL),
            0x1E => self.load(R8::E, N8),
            0x67 => self.load(R8::H, R8::A),
            0x60 => self.load(R8::H, R8::B),
            0x61 => self.load(R8::H, R8::C),
            0x62 => self.load(R8::H, R8::D),
            0x63 => self.load(R8::H, R8::E),
            0x64 => self.load(R8::H, R8::H),
            0x65 => self.load(R8::H, R8::L),
            0x66 => self.load(R8::H, Addr::HL),
            0x26 => self.load(R8::H, N8),
            0x6F => self.load(R8::L, R8::A),
            0x68 => self.load(R8::L, R8::B),
            0x69 => self.load(R8::L, R8::C),
            0x6A => self.load(R8::L, R8::D),
            0x6B => self.load(R8::L, R8::E),
            0x6C => self.load(R8::L, R8::H),
            0x6D => self.load(R8::L, R8::L),
            0x6E => self.load(R8::L, Addr::HL),
            0x2E => self.load(R8::L, N8),
            0x77 => self.load(Addr::HL, R8::A),
            0x70 => self.load(Addr::HL, R8::B),
            0x71 => self.load(Addr::HL, R8::C),
            0x72 => self.load(Addr::HL, R8::D),
            0x73 => self.load(Addr::HL, R8::E),
            0x74 => self.load(Addr::HL, R8::H),
            0x75 => self.load(Addr::HL, R8::L),
            0x36 => self.load(Addr::HL, N8),
            0x7F => self.load(R8::A, R8::A),
            0x78 => self.load(R8::A, R8::B),
            0x79 => self.load(R8::A, R8::C),
            0x7A => self.load(R8::A, R8::D),
            0x7B => self.load(R8::A, R8::E),
            0x7C => self.load(R8::A, R8::H),
            0x7D => self.load(R8::A, R8::L),
            0x7E => self.load(R8::A, Addr::HL),
            0x3E => self.load(R8::A, N8),
            0x02 => self.load(Addr::BC, R8::A),
            0x12 => self.load(Addr::DE, R8::A),
            0x22 => self.load(Addr::HLi, R8::A),
            0x32 => self.load(Addr::HLd, R8::A),
            0x0A => self.load(R8::A, Addr::BC),
            0x1A => self.load(R8::A, Addr::DE),
            0x2A => self.load(R8::A, Addr::HLi),
            0x3A => self.load(R8::A, Addr::HLd),
            0xEA => self.load(Addr::N16, R8::A),
            0xFA => self.load(R8::A, Addr::N16),
            // LDH
            0xE0 => self.load(HighAddr::N8, R8::A),
            0xF0 => self.load(R8::A, HighAddr::N8),
            0xE2 => self.load(HighAddr::C, R8::A),
            0xF2 => self.load(R8::A, HighAddr::C),
            // ---- 16-bit Load
            // LD
            0x01 => self.load16(R16::BC, N16),
            0x11 => self.load16(R16::DE, N16),
            0x21 => self.load16(R16::HL, N16),
            0x31 => self.load16(R16::SP, N16),
            0xF9 => self.load16(R16::SP, R16::HL),
            0x08 => self.load16_a16_sp(),
            0xF8 => self.load16_hl_sp(),
            // PUSH
            0xC5 => self.push(R16::BC),
            0xD5 => self.push(R16::DE),
            0xE5 => self.push(R16::HL),
            0xF5 => self.push(R16::AF),
            // POP
            0xC1 => self.pop(R16::BC),
            0xD1 => self.pop(R16::DE),
            0xE1 => self.pop(R16::HL),
            0xF1 => self.pop(R16::AF),
            // ---- Jumps
            // JP
            0xE9 => self.jump_to_hl(),
            0xC3 => self.jump(JumpCondition::Always),
            0xC2 => self.jump(JumpCondition::NotZero),
            0xCA => self.jump(JumpCondition::Zero),
            0xD2 => self.jump(JumpCondition::NotCarry),
            0xDA => self.jump(JumpCondition::Carry),
            // JR
            0x18 => self.jump_relative(JumpCondition::Always),
            0x20 => self.jump_relative(JumpCondition::NotZero),
            0x28 => self.jump_relative(JumpCondition::Zero),
            0x30 => self.jump_relative(JumpCondition::NotCarry),
            0x38 => self.jump_relative(JumpCondition::Carry),
            // CALL
            0xCD => self.call(JumpCondition::Always),
            0xC4 => self.call(JumpCondition::NotZero),
            0xCC => self.call(JumpCondition::Zero),
            0xD4 => self.call(JumpCondition::NotCarry),
            0xDC => self.call(JumpCondition::Carry),
            // RET
            0xC9 => self.return_(JumpCondition::Always),
            0xC0 => self.return_(JumpCondition::NotZero),
            0xC8 => self.return_(JumpCondition::Zero),
            0xD0 => self.return_(JumpCondition::NotCarry),
            0xD8 => self.return_(JumpCondition::Carry),
            // RETI
            0xD9 => self.return_from_interrupt_handler(),
            // RST
            0xC7 => self.restart(0x00),
            0xCF => self.restart(0x08),
            0xD7 => self.restart(0x10),
            0xDF => self.restart(0x18),
            0xE7 => self.restart(0x20),
            0xEF => self.restart(0x28),
            0xF7 => self.restart(0x30),
            0xFF => self.restart(0x38),
            // ---- Control
            //NOP
            0x00 => self.no_operation(),
            // STOP
            0x10 => self.stop(),
            // HALT
            0x76 => self.halt(),
            // PREFIX
            0xCB => {
                let next_byte = self.read_next_byte();
                self.execute_prefixed(next_byte);
            }
            // DI
            0xF3 => self.disable_interrupt(),
            // EI
            0xFB => self.enable_interrupt(),
            // ---- Undefined
            n @ (0xD3 | 0xDB | 0xDD | 0xE3 | 0xE4 | 0xEB | 0xEC | 0xED | 0xF4 | 0xFC | 0xFD) => {
                Self::undefined(n);
            }
        }
    }

    fn execute_prefixed(&mut self, byte: u8) {
        match byte {
            // ---- Bit Shift
            // RLC
            0x00 => self.rotate_left_circular(R8::B),
            0x01 => self.rotate_left_circular(R8::C),
            0x02 => self.rotate_left_circular(R8::D),
            0x03 => self.rotate_left_circular(R8::E),
            0x04 => self.rotate_left_circular(R8::H),
            0x05 => self.rotate_left_circular(R8::L),
            0x06 => self.rotate_left_circular(Addr::HL),
            0x07 => self.rotate_left_circular(R8::A),
            // RRC
            0x08 => self.rotate_right_circular(R8::B),
            0x09 => self.rotate_right_circular(R8::C),
            0x0A => self.rotate_right_circular(R8::D),
            0x0B => self.rotate_right_circular(R8::E),
            0x0C => self.rotate_right_circular(R8::H),
            0x0D => self.rotate_right_circular(R8::L),
            0x0E => self.rotate_right_circular(Addr::HL),
            0x0F => self.rotate_right_circular(R8::A),
            // RL
            0x10 => self.rotate_left(R8::B),
            0x11 => self.rotate_left(R8::C),
            0x12 => self.rotate_left(R8::D),
            0x13 => self.rotate_left(R8::E),
            0x14 => self.rotate_left(R8::H),
            0x15 => self.rotate_left(R8::L),
            0x16 => self.rotate_left(Addr::HL),
            0x17 => self.rotate_left(R8::A),
            // RR
            0x18 => self.rotate_right(R8::B),
            0x19 => self.rotate_right(R8::C),
            0x1A => self.rotate_right(R8::D),
            0x1B => self.rotate_right(R8::E),
            0x1C => self.rotate_right(R8::H),
            0x1D => self.rotate_right(R8::L),
            0x1E => self.rotate_right(Addr::HL),
            0x1F => self.rotate_right(R8::A),
            // SLA
            0x20 => self.shift_left_arithmetic(R8::B),
            0x21 => self.shift_left_arithmetic(R8::C),
            0x22 => self.shift_left_arithmetic(R8::D),
            0x23 => self.shift_left_arithmetic(R8::E),
            0x24 => self.shift_left_arithmetic(R8::H),
            0x25 => self.shift_left_arithmetic(R8::L),
            0x26 => self.shift_left_arithmetic(Addr::HL),
            0x27 => self.shift_left_arithmetic(R8::A),
            // SRA
            0x28 => self.shift_right_arithmetic(R8::B),
            0x29 => self.shift_right_arithmetic(R8::C),
            0x2A => self.shift_right_arithmetic(R8::D),
            0x2B => self.shift_right_arithmetic(R8::E),
            0x2C => self.shift_right_arithmetic(R8::H),
            0x2D => self.shift_right_arithmetic(R8::L),
            0x2E => self.shift_right_arithmetic(Addr::HL),
            0x2F => self.shift_right_arithmetic(R8::A),
            // SWAP
            0x30 => self.swap(R8::B),
            0x31 => self.swap(R8::C),
            0x32 => self.swap(R8::D),
            0x33 => self.swap(R8::E),
            0x34 => self.swap(R8::H),
            0x35 => self.swap(R8::L),
            0x36 => self.swap(Addr::HL),
            0x37 => self.swap(R8::A),
            // SRL
            0x38 => self.shift_right_logical(R8::B),
            0x39 => self.shift_right_logical(R8::C),
            0x3A => self.shift_right_logical(R8::D),
            0x3B => self.shift_right_logical(R8::E),
            0x3C => self.shift_right_logical(R8::H),
            0x3D => self.shift_right_logical(R8::L),
            0x3E => self.shift_right_logical(Addr::HL),
            0x3F => self.shift_right_logical(R8::A),
            // ---- Bit Operations
            // BIT
            0x40 => self.bit_test(0, R8::B),
            0x41 => self.bit_test(0, R8::C),
            0x42 => self.bit_test(0, R8::D),
            0x43 => self.bit_test(0, R8::E),
            0x44 => self.bit_test(0, R8::H),
            0x45 => self.bit_test(0, R8::L),
            0x46 => self.bit_test(0, Addr::HL),
            0x47 => self.bit_test(0, R8::A),
            0x48 => self.bit_test(1, R8::B),
            0x49 => self.bit_test(1, R8::C),
            0x4A => self.bit_test(1, R8::D),
            0x4B => self.bit_test(1, R8::E),
            0x4C => self.bit_test(1, R8::H),
            0x4D => self.bit_test(1, R8::L),
            0x4E => self.bit_test(1, Addr::HL),
            0x4F => self.bit_test(1, R8::A),
            0x50 => self.bit_test(2, R8::B),
            0x51 => self.bit_test(2, R8::C),
            0x52 => self.bit_test(2, R8::D),
            0x53 => self.bit_test(2, R8::E),
            0x54 => self.bit_test(2, R8::H),
            0x55 => self.bit_test(2, R8::L),
            0x56 => self.bit_test(2, Addr::HL),
            0x57 => self.bit_test(2, R8::A),
            0x58 => self.bit_test(3, R8::B),
            0x59 => self.bit_test(3, R8::C),
            0x5A => self.bit_test(3, R8::D),
            0x5B => self.bit_test(3, R8::E),
            0x5C => self.bit_test(3, R8::H),
            0x5D => self.bit_test(3, R8::L),
            0x5E => self.bit_test(3, Addr::HL),
            0x5F => self.bit_test(3, R8::A),
            0x60 => self.bit_test(4, R8::B),
            0x61 => self.bit_test(4, R8::C),
            0x62 => self.bit_test(4, R8::D),
            0x63 => self.bit_test(4, R8::E),
            0x64 => self.bit_test(4, R8::H),
            0x65 => self.bit_test(4, R8::L),
            0x66 => self.bit_test(4, Addr::HL),
            0x67 => self.bit_test(4, R8::A),
            0x68 => self.bit_test(5, R8::B),
            0x69 => self.bit_test(5, R8::C),
            0x6A => self.bit_test(5, R8::D),
            0x6B => self.bit_test(5, R8::E),
            0x6C => self.bit_test(5, R8::H),
            0x6D => self.bit_test(5, R8::L),
            0x6E => self.bit_test(5, Addr::HL),
            0x6F => self.bit_test(5, R8::A),
            0x70 => self.bit_test(6, R8::B),
            0x71 => self.bit_test(6, R8::C),
            0x72 => self.bit_test(6, R8::D),
            0x73 => self.bit_test(6, R8::E),
            0x74 => self.bit_test(6, R8::H),
            0x75 => self.bit_test(6, R8::L),
            0x76 => self.bit_test(6, Addr::HL),
            0x77 => self.bit_test(6, R8::A),
            0x78 => self.bit_test(7, R8::B),
            0x79 => self.bit_test(7, R8::C),
            0x7A => self.bit_test(7, R8::D),
            0x7B => self.bit_test(7, R8::E),
            0x7C => self.bit_test(7, R8::H),
            0x7D => self.bit_test(7, R8::L),
            0x7E => self.bit_test(7, Addr::HL),
            0x7F => self.bit_test(7, R8::A),
            // RES
            0x80 => self.bit_reset(0, R8::B),
            0x81 => self.bit_reset(0, R8::C),
            0x82 => self.bit_reset(0, R8::D),
            0x83 => self.bit_reset(0, R8::E),
            0x84 => self.bit_reset(0, R8::H),
            0x85 => self.bit_reset(0, R8::L),
            0x86 => self.bit_reset(0, Addr::HL),
            0x87 => self.bit_reset(0, R8::A),
            0x88 => self.bit_reset(1, R8::B),
            0x89 => self.bit_reset(1, R8::C),
            0x8A => self.bit_reset(1, R8::D),
            0x8B => self.bit_reset(1, R8::E),
            0x8C => self.bit_reset(1, R8::H),
            0x8D => self.bit_reset(1, R8::L),
            0x8E => self.bit_reset(1, Addr::HL),
            0x8F => self.bit_reset(1, R8::A),
            0x90 => self.bit_reset(2, R8::B),
            0x91 => self.bit_reset(2, R8::C),
            0x92 => self.bit_reset(2, R8::D),
            0x93 => self.bit_reset(2, R8::E),
            0x94 => self.bit_reset(2, R8::H),
            0x95 => self.bit_reset(2, R8::L),
            0x96 => self.bit_reset(2, Addr::HL),
            0x97 => self.bit_reset(2, R8::A),
            0x98 => self.bit_reset(3, R8::B),
            0x99 => self.bit_reset(3, R8::C),
            0x9A => self.bit_reset(3, R8::D),
            0x9B => self.bit_reset(3, R8::E),
            0x9C => self.bit_reset(3, R8::H),
            0x9D => self.bit_reset(3, R8::L),
            0x9E => self.bit_reset(3, Addr::HL),
            0x9F => self.bit_reset(3, R8::A),
            0xA0 => self.bit_reset(4, R8::B),
            0xA1 => self.bit_reset(4, R8::C),
            0xA2 => self.bit_reset(4, R8::D),
            0xA3 => self.bit_reset(4, R8::E),
            0xA4 => self.bit_reset(4, R8::H),
            0xA5 => self.bit_reset(4, R8::L),
            0xA6 => self.bit_reset(4, Addr::HL),
            0xA7 => self.bit_reset(4, R8::A),
            0xA8 => self.bit_reset(5, R8::B),
            0xA9 => self.bit_reset(5, R8::C),
            0xAA => self.bit_reset(5, R8::D),
            0xAB => self.bit_reset(5, R8::E),
            0xAC => self.bit_reset(5, R8::H),
            0xAD => self.bit_reset(5, R8::L),
            0xAE => self.bit_reset(5, Addr::HL),
            0xAF => self.bit_reset(5, R8::A),
            0xB0 => self.bit_reset(6, R8::B),
            0xB1 => self.bit_reset(6, R8::C),
            0xB2 => self.bit_reset(6, R8::D),
            0xB3 => self.bit_reset(6, R8::E),
            0xB4 => self.bit_reset(6, R8::H),
            0xB5 => self.bit_reset(6, R8::L),
            0xB6 => self.bit_reset(6, Addr::HL),
            0xB7 => self.bit_reset(6, R8::A),
            0xB8 => self.bit_reset(7, R8::B),
            0xB9 => self.bit_reset(7, R8::C),
            0xBA => self.bit_reset(7, R8::D),
            0xBB => self.bit_reset(7, R8::E),
            0xBC => self.bit_reset(7, R8::H),
            0xBD => self.bit_reset(7, R8::L),
            0xBE => self.bit_reset(7, Addr::HL),
            0xBF => self.bit_reset(7, R8::A),
            // SET
            0xC0 => self.bit_set(0, R8::B),
            0xC1 => self.bit_set(0, R8::C),
            0xC2 => self.bit_set(0, R8::D),
            0xC3 => self.bit_set(0, R8::E),
            0xC4 => self.bit_set(0, R8::H),
            0xC5 => self.bit_set(0, R8::L),
            0xC6 => self.bit_set(0, Addr::HL),
            0xC7 => self.bit_set(0, R8::A),
            0xC8 => self.bit_set(1, R8::B),
            0xC9 => self.bit_set(1, R8::C),
            0xCA => self.bit_set(1, R8::D),
            0xCB => self.bit_set(1, R8::E),
            0xCC => self.bit_set(1, R8::H),
            0xCD => self.bit_set(1, R8::L),
            0xCE => self.bit_set(1, Addr::HL),
            0xCF => self.bit_set(1, R8::A),
            0xD0 => self.bit_set(2, R8::B),
            0xD1 => self.bit_set(2, R8::C),
            0xD2 => self.bit_set(2, R8::D),
            0xD3 => self.bit_set(2, R8::E),
            0xD4 => self.bit_set(2, R8::H),
            0xD5 => self.bit_set(2, R8::L),
            0xD6 => self.bit_set(2, Addr::HL),
            0xD7 => self.bit_set(2, R8::A),
            0xD8 => self.bit_set(3, R8::B),
            0xD9 => self.bit_set(3, R8::C),
            0xDA => self.bit_set(3, R8::D),
            0xDB => self.bit_set(3, R8::E),
            0xDC => self.bit_set(3, R8::H),
            0xDD => self.bit_set(3, R8::L),
            0xDE => self.bit_set(3, Addr::HL),
            0xDF => self.bit_set(3, R8::A),
            0xE0 => self.bit_set(4, R8::B),
            0xE1 => self.bit_set(4, R8::C),
            0xE2 => self.bit_set(4, R8::D),
            0xE3 => self.bit_set(4, R8::E),
            0xE4 => self.bit_set(4, R8::H),
            0xE5 => self.bit_set(4, R8::L),
            0xE6 => self.bit_set(4, Addr::HL),
            0xE7 => self.bit_set(4, R8::A),
            0xE8 => self.bit_set(5, R8::B),
            0xE9 => self.bit_set(5, R8::C),
            0xEA => self.bit_set(5, R8::D),
            0xEB => self.bit_set(5, R8::E),
            0xEC => self.bit_set(5, R8::H),
            0xED => self.bit_set(5, R8::L),
            0xEE => self.bit_set(5, Addr::HL),
            0xEF => self.bit_set(5, R8::A),
            0xF0 => self.bit_set(6, R8::B),
            0xF1 => self.bit_set(6, R8::C),
            0xF2 => self.bit_set(6, R8::D),
            0xF3 => self.bit_set(6, R8::E),
            0xF4 => self.bit_set(6, R8::H),
            0xF5 => self.bit_set(6, R8::L),
            0xF6 => self.bit_set(6, Addr::HL),
            0xF7 => self.bit_set(6, R8::A),
            0xF8 => self.bit_set(7, R8::B),
            0xF9 => self.bit_set(7, R8::C),
            0xFA => self.bit_set(7, R8::D),
            0xFB => self.bit_set(7, R8::E),
            0xFC => self.bit_set(7, R8::H),
            0xFD => self.bit_set(7, R8::L),
            0xFE => self.bit_set(7, Addr::HL),
            0xFF => self.bit_set(7, R8::A),
        }
    }
}
